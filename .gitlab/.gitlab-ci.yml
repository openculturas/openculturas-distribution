include:
  - project: 'devops/gitlab-ci-templates'
    ref: 2.2.40
    file:
      - 'drupal.yml'

stages:
  - ".pre"
  - validate
  - build
  - deploy
  - cronjobs
  - release
  - ".post"

variables:
  CLOUDRON_DB_SOURCE: 'gitrepo'

.composer:
  image: $CLOUDRON_BASE_IMAGE
  stage: validate
  needs:
    - docker:base
  variables:
    COMPOSER_CACHE_DIR: "$CI_PROJECT_DIR/.composer"
    COMPOSER_EXIT_ON_PATCH_FAILURE: 1
    COMPOSER_MEMORY_LIMIT: -1
  cache:
    - key: composer
      paths:
        - $COMPOSER_CACHE_DIR
      when: always

composer validate:
  extends: .composer
  stage: validate
  interruptible: true
  script:
    - composer validate --ansi --strict --check-lock
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      when: never
    - if: $CI_COMMIT_BRANCH
      changes:
        paths:
          - "composer.json"
          - "composer.lock"

.validate_rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_BRANCH

phplint:
  extends:
    - .composer
    - .validate_rules
  stage: validate
  interruptible: true
  script:
    - composer install --ansi --no-interaction
    - vendor/bin/parallel-lint --show-deprecated -e php,module,install,profile,theme --gitlab profile > gl-code-quality-report.json
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    reports:
      codequality: [gl-code-quality-report.json]

phpcs:
  extends:
    - .composer
    - .validate_rules
  needs:
    - phplint
  stage: validate
  interruptible: true
  allow_failure: true
  script:
    - composer install --ansi --no-interaction
    - composer run php:cs -- --report=full --report-\\Micheh\\PhpCodeSniffer\\Report\\Gitlab=gl-code-quality-report.json
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    reports:
      codequality: [gl-code-quality-report.json]

phpstan:
  extends:
    - .composer
    - .validate_rules
  needs:
    - phplint
  stage: validate
  interruptible: true
  script:
    - composer install --ansi --no-interaction
    - vendor/bin/phpstan.phar --configuration=phpstan.ci.neon --no-interaction --no-progress --error-format=gitlab > gl-code-quality-report.json
  cache:
    - !reference [ .composer, cache ]
    - key: phpstan
      paths:
        - .phpstancache
      when: always
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    reports:
      codequality: [gl-code-quality-report.json]

rector dry-run:
  extends:
    - .composer
    - .validate_rules
  needs:
    - phplint
  stage: validate
  interruptible: true
  script:
    - composer install --ansi --no-interaction
    - vendor/bin/rector --no-progress-bar --dry-run
  cache:
    - !reference [ .composer, cache ]
    - key: rector
      paths:
        - .rectorcache
      when: always
#  artifacts:
#    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
#    when: always
#    reports:
#      codequality: [gl-code-quality-report.json]

.npm:
  image: $CLOUDRON_BASE_IMAGE
  stage: validate
  extends: .validate_rules
  needs:
    - docker:base
    - phplint
  variables:
    npm_config_cache: "$CI_PROJECT_DIR/.npm"
  cache:
    - key: npm
      paths:
        - $npm_config_cache
      when: always

.composer_npm:
  extends:
    - .composer
    - .npm
  cache:
    - !reference [.composer, cache]
    - !reference [.npm, cache]

.stylelint:
  extends: .composer_npm
  variables:
    STYLELINT_CODE_QUALITY_REPORT: gl-code-quality-report.json
  stage: validate
  interruptible: true
  before_script:
    - composer install --ansi --no-interaction
    - npm ci --no-audit --prefer-offline
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    reports:
      codequality: [gl-code-quality-report.json]
  allow_failure: true

lint scss:
  extends: .stylelint
  cache:
    - !reference [ .composer_npm, cache ]
    - key: stylelint-scss
      paths:
        - .stylelintcache
      when: always
  script:
    - npx stylelint --cache --custom-formatter=node_modules/stylelint-formatter-gitlab --config=.stylelintrc.scss.json "profile/themes/openculturas_base/scss_config/**/*.scss"

lint css:
  extends: .stylelint
  cache:
    - !reference [ .composer_npm, cache ]
    - key: stylelint-css
      paths:
        - .stylelintcache
      when: always
  script:
    - npx stylelint --cache --custom-formatter=node_modules/stylelint-formatter-gitlab "profile/modules/**/*.css"

.eslint:
  extends: .composer_npm
  stage: validate
  interruptible: true
  allow_failure: true
  variables:
    ESLINT_CODE_QUALITY_REPORT: gl-code-quality-report.json
  before_script:
    - composer install --ansi --no-interaction
    - npm ci --no-audit --prefer-offline
  cache:
    - !reference [.composer_npm, cache]
    - key: eslint
      paths:
        - .eslintcache
      when: always
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    reports:
      codequality: [gl-code-quality-report.json]

eslint:
  extends: .eslint
  script:
    - npx eslint --cache --format gitlab .

build:image:stage:
  extends: .build:image:stage

deploy:stage:
  extends:
    - .deploy_cloudron:stage
    - .only_stage_rules_manually
  needs:
    - build:image:stage

deploy:stage:remove:
  extends: .deploy_cloudron:stage:remove
  needs:
    - deploy:stage

build:image:prelive:
  extends: .build:image:prelive

deploy:prelive:
  extends: .deploy_cloudron:prelive
  needs:
    - build:image:prelive

database:snapshot:
  extends: .pre_cloudron
  stage: cronjobs
  variables:
    APP_ENV: stage
  script:
    - bash ${DEBUG:+-o xtrace} /ci/cloudron/db_snapshot.sh
  rules:
    - if: $DB_CREATE_SNAPSHOT

test create project:
  extends: .composer
  needs: []
  script:
    - composer create-project --remove-vcs --no-interaction --ansi drupal/openculturas_project example.org
    - cd example.org
    - composer audit --locked --no-interaction --ansi
    - composer update --prefer-lowest --no-interaction --ansi
  # Enable when https://www.drupal.org/project/smtp/issues/3352909 is fixed.
  #  - composer audit --locked --no-interaction --ansi
  rules:
    - if: $TEST_COMPOSER_CREATE_PROJECT
