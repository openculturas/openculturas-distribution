<?php

declare(strict_types=1);

/**
 * @file
 * Functions to support theming in the OpenCulturas Base theme.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
use Drupal\address\AddressInterface;
use Drupal\geofield\Plugin\Field\FieldType\GeofieldItem;
use Drupal\image\ImageStyleInterface;
use Drupal\media\MediaInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function openculturas_base_preprocess_html(array &$variables): void {
  // Set entity type for adding a class to the body.
  foreach (\Drupal::routeMatch()->getParameters()->all() as $parameter) {
    if ($parameter instanceof FieldableEntityInterface) {
      $variables['entity_type_id'] = $parameter->getEntityTypeId();
      break;
    }
  }

  if (\Drupal::theme()->getActiveTheme()->getName() === 'openculturas_base') {
    $config = \Drupal::configFactory()->get('openculturas_base.settings');
    $variables['custom_favicons'] = !$config->get('favicon.use_default');
  }
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 *
 * Provides header image to serve as layout background.
 */
function openculturas_base_preprocess_page(array &$variables): void {
  $bg_image = theme_get_setting('background_image.mode') ?? 'mood_image';
  $mood_image_uri = NULL;
  if ($bg_image === 'mood_image') {
    // Check if the current page is a node or a taxonomy term page.
    /** @var \Drupal\node\NodeInterface|null $entity */
    $entity = \Drupal::routeMatch()->getParameter('node');
    if (!$entity instanceof NodeInterface) {
      /** @var \Drupal\taxonomy\TermInterface|null $entity */
      $entity = \Drupal::routeMatch()->getParameter('taxonomy_term');
    }

    if ($entity instanceof ContentEntityInterface && $entity->hasField('field_mood_image')) {
      $mood_image = $entity->get('field_mood_image')->entity;
    }
    else {
      return;
    }

    // Get the URL of the image style "header_image" and set it as a variable for page.html.twig.
    if ($mood_image instanceof MediaInterface) {
      /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $field */
      $field = $mood_image->get('field_media_image');
      $references = $field->referencedEntities();
      if ($references === []) {
        return;
      }

      /** @var \Drupal\file\FileInterface $file */
      $file = reset($references);
      $mood_image_uri = $file->getFileUri();
    }
  }
  elseif ($bg_image === 'global_image') {
    $mood_image_uri = theme_get_setting('background_image.path');
  }

  if (is_string($mood_image_uri)) {
    /** @var \Drupal\image\ImageStyleStorageInterface $imageStorage */
    $imageStorage = \Drupal::entityTypeManager()->getStorage('image_style');
    $mood_image_style = $imageStorage->load('header_image');
    if (!$mood_image_style instanceof ImageStyleInterface) {
      return;
    }

    $mood_image_bg = $mood_image_style->buildUrl($mood_image_uri);
    $variables['mood_image_bg'] = $mood_image_bg;
  }

}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function openculturas_base_preprocess_node(array &$variables): void {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Hide all fields used by seperated blocks in different areas of the theme on full viewmode.
  // We don't hide them on other viewmodes because they could be needed there.
  if ($variables["view_mode"] === 'full') {
    $hidden_fields = [
      'field_subtitle',
      'field_mood_image',
      'field_portrait',
      'field_premiere',
    ];
    foreach ($hidden_fields as $name) {
      if (isset($variables['content'][$name])) {
        $variables["content"][$name]['#access'] = FALSE;
      }
    }

    if ($node->hasField('field_layout_switcher') && !$node->get('field_layout_switcher')->isEmpty()) {
      $variables['attributes']['class'][] = $node->get('field_layout_switcher')->value;
    }

    if ($node->hasField('field_event_status') && !$node->get('field_event_status')->isEmpty()) {
      $variables['attributes']['class'][] = $node->get('field_event_status')->value;
    }
  }

  // Override details title with user-set value and hide original field rendering.
  if ($node->hasField('field_reference_title')
    && !$node->get('field_reference_title')->isEmpty()
    && isset($variables['elements']['#fieldgroups']['group_featuring'])) {
    $variables['elements']['#fieldgroups']['group_featuring']->label = $node->get('field_reference_title')->value;
    $variables['content']['field_reference_title']['#access'] = FALSE;
  }

  if ($node->bundle() === 'date' && $node->hasField('field_event_description') && !$node->get('field_event_description')->isEmpty()) {
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $list */
    $list = $node->get('field_event_description');
    $events = $list->referencedEntities();
    if ($events !== []) {
      $event = reset($events);
      if ($event instanceof NodeInterface) {
        $variables['label'] = $event->label();
        if (isset($variables['content']['extra_field_event_mood_image']) && is_array($variables['content']['extra_field_event_mood_image'])) {
          $variables['content']['field_mood_image'] = $variables['content']['extra_field_event_mood_image'];
          $variables['content']['extra_field_event_mood_image']['#access'] = FALSE;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for field.html.twig.
 */
function openculturas_base_preprocess_field(array &$variables): void {
  // Adds a class depending on referenced entity to links of entity_reference fields.
  if ($variables['field_type'] === 'entity_reference') {
    foreach ($variables["items"] as $item) {
      if (isset($item['content']['#options']['entity_type'], $item['content']['#options']['entity'])) {
        $item['attributes']->addClass('reference--' . $item["content"]["#options"]["entity_type"]);
        $item['attributes']->addClass('reference--' . $item["content"]["#options"]["entity_type"] . '--' . $item["content"]["#options"]["entity"]->bundle());
      }
    }
  }

  if ($variables['field_name'] === 'field_badges') {
    foreach ($variables['items'] as $delta => $item) {
      $item['attributes']->addClass('badge--' . $variables['element']['#items']->get($delta)->value);
    }
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function openculturas_base_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables): void {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_preprocess_HOOK() for paragraph.html.twig.
 */
function openculturas_base_preprocess_paragraph(array &$variables): void {
  $variables['address_links'] = NULL;
  $render_array = [];
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];
  if ($paragraph->bundle() === 'address_data' && \Drupal::hasService('openculturas_address_links.address_service')) {
    $links = [];
    if ($paragraph->hasField('field_address_location') && !$paragraph->get('field_address_location')->isEmpty()) {
      /** @var \Drupal\geofield\Plugin\Field\FieldType\GeofieldItem|null $item */
      $item = $paragraph->get('field_address_location')->first();
      if ($item instanceof GeofieldItem) {
        /** @var \Drupal\openculturas_address_links\AddressService $addressService */
        $addressService = \Drupal::service('openculturas_address_links.address_service');
        if ($url = $addressService->buildUrlFromGeofield($item, 'directions')) {
          $links['directions'] = [
            '#type' => 'link',
            '#title' => t('Navigation'),
            '#url' => $url,
          ];
        }
      }
    }

    if ($paragraph->hasField('field_address') && !$paragraph->get('field_address')->isEmpty()) {
      $item = $paragraph->get('field_address')->first();
      if ($item instanceof AddressInterface) {
        /** @var \Drupal\openculturas_address_links\AddressService $addressService */
        $addressService = \Drupal::service('openculturas_address_links.address_service');
        if ($url = $addressService->buildUrlFromAddress($item, 'public_transport')) {
          $links['public_transport'] = [
            '#type' => 'link',
            '#title' => t('Public Transport'),
            '#url' => $url,
          ];
        }
      }
    }

    if ($links !== []) {
      $render_array['wrapper'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => [
            'address-navigation',
          ],
        ],
      ] + $links;
      $variables['address_links'] = $render_array;
    }
  }

  if ($paragraph->bundle() === 'member' && $paragraph->hasField('field_member') && !$paragraph->get('field_member')->isEmpty()) {
    /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem|null $entityReferenceItem */
    $entityReferenceItem = $paragraph->get('field_member')->first();
    if (!$entityReferenceItem instanceof EntityReferenceItem) {
      return;
    }

    $variables['member_is_published'] = FALSE;
    $variables['user_has_edit_access'] = FALSE;
    /** @var \Drupal\node\NodeInterface|null $node */
    $node = $entityReferenceItem->entity ?? NULL;
    if (!$node instanceof NodeInterface) {
      return;
    }

    $variables['member_is_published'] = $node->isPublished();
    $variables['user_has_edit_access'] = $node->access('edit');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for field.html.twig.
 *
 * Adds the view_mode of the field to the twig template suggestions.
 */
function openculturas_base_theme_suggestions_field_alter(array &$suggestions, array $variables): void {
  // Add view_mode of the element (if available) to each field template suggestion.
  if (!empty($variables['element']['#view_mode'])) {
    // Enable reference.
    foreach ($suggestions as &$suggestion) {
      // Make suggestion array multidimensional.
      $suggestion = [
        $suggestion,
        $suggestion . '__' . 'view_mode_' . $variables['element']['#view_mode'],
      ];
      // Disable reference.
      unset($suggestion);
    }

    // Flatten suggestions array.
    $suggestions = array_merge(...$suggestions);
  }
}
