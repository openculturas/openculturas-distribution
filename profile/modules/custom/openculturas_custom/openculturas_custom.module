<?php

/**
 * @file
 * Primary module hooks for OpenCulturas Base module.
 */

declare(strict_types=1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldItemInterface;
use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\flag\Entity\Flag;
use Drupal\flag\FlagInterface;
use Drupal\flag\FlaggingInterface;
use Drupal\geofield\Plugin\views\filter\GeofieldProximityFilter;
use Drupal\leaflet_views\Plugin\views\style\LeafletMap;
use Drupal\media\MediaInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\openculturas_custom\Plugin\DateAugmenter\AddToCal;
use Drupal\openculturas_custom\Plugin\views\filter\Date;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\smart_date\Plugin\Field\FieldType\SmartDateItem;
use Drupal\taxonomy\TermInterface;
use Drupal\update_helper_checklist\Entity\Update;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\Render\ViewsRenderPipelineMarkup;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_editor_js_settings_alter().
 *
 * Adds a .content class to the CKEditor body so CSS from frontend will work.
 */
function openculturas_custom_editor_js_settings_alter(array &$settings): void {
  if (!empty($settings['editor']['formats'])) {
    foreach ($settings['editor']['formats'] as &$config) {
      if ($config['editor'] === 'ckeditor') {
        $config['editorSettings']['bodyClass'] = 'content';
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function openculturas_custom_theme(): array {
  return [
    'page_title_custom' => [
      'variables' => [
        'title' => NULL,
        'subtitle' => NULL,
        'sub_type' => NULL,
        'profile_image' => NULL,
      ],
      'template' => 'page-title-custom',
    ],
  ];
}

/**
 * Implements hook_theme_registry_alter().
 */
function openculturas_custom_theme_registry_alter(array &$theme_registry): void {
  if (isset($theme_registry['attribution_creative_commons_icons'])) {
    /** @var \Drupal\Core\Extension\ExtensionList $extension_list */
    $extension_list = \Drupal::service('extension.list.module');
    $theme_registry['attribution_creative_commons_icons']['theme path'] = $extension_list->getPath('openculturas_custom');
    $theme_registry['attribution_creative_commons_icons']['path'] = $extension_list->getPath('openculturas_custom') . '/templates';
  }
}

/**
 * Implements hook_preprocess_HOOK() for leaflet-map.html.twig.
 */
function openculturas_custom_preprocess_leaflet_map(array &$variables): void {
  $variables['#attached']['library'][] = 'openculturas_custom/leaflet_extra';
}

/**
 * Implements hook_library_info_alter().
 */
function openculturas_custom_library_info_alter(array &$libraries, string $extension): void {
  /** @var \Drupal\Core\Asset\LibrariesDirectoryFileFinder $library_file_finder */
  $library_file_finder = \Drupal::service('library.libraries_directory_file_finder');
  if ($extension === 'leaflet_markercluster') {
    $library = 'leaflet-markercluster';
    if (isset($libraries[$library])) {
      if (($path = $library_file_finder->find('leaflet.markercluster/dist/MarkerCluster.css'))) {
        $libraries[$library]['css']['component'] = ['/' . $path => []];
        unset($libraries[$library]['css']['component']['js/leaflet_markercluster/dist/MarkerCluster.css']);
      }

      if (($path = $library_file_finder->find('leaflet.markercluster/dist/MarkerCluster.Default.css'))) {
        $libraries[$library]['css']['component']['/' . $path] = [];
        unset($libraries[$library]['css']['component']['js/leaflet_markercluster/dist/MarkerCluster.Default.css']);
      }

      if (($path = $library_file_finder->find('leaflet.markercluster/dist/leaflet.markercluster.js'))) {
        $libraries[$library]['js']['/' . $path] = ['minified' => TRUE];
        unset($libraries[$library]['js']['js/leaflet_markercluster/dist/leaflet.markercluster.js']);
      }
    }
  }
  elseif ($extension === 'leaflet') {

    $library = 'leaflet';
    if (isset($libraries[$library])) {
      $libraries[$library]['js']['js/leaflet/dist/leaflet.js']['minified'] = TRUE;
    }

    $library = 'leaflet-geoman';
    if (isset($libraries[$library])) {
      $libraries[$library]['js']['js/leaflet-geoman-free/dist/leaflet-geoman.min.js']['minified'] = TRUE;
    }

    $library = 'leaflet.fullscreen';
    if (isset($libraries[$library])) {
      if (($path = $library_file_finder->find('leaflet.fullscreen/dist/leaflet.fullscreen.css'))) {
        $libraries[$library]['css']['component'] = ['/' . $path => []];
      }

      if (($path = $library_file_finder->find('leaflet.fullscreen/dist/Leaflet.fullscreen.min.js'))) {
        $libraries[$library]['js'] = ['/' . $path => ['minified' => TRUE]];
      }
    }

    $library = 'leaflet.gesture_handling';
    if (isset($libraries[$library])) {
      if (($path = $library_file_finder->find('leaflet.gesture-handling/dist/leaflet-gesture-handling.min.css'))) {
        $libraries[$library]['css']['component'] = ['/' . $path => ['minified' => TRUE]];
      }

      if (($path = $library_file_finder->find('leaflet.gesture-handling/dist/leaflet-gesture-handling.min.js'))) {
        $libraries[$library]['js'] = ['/' . $path => ['minified' => TRUE]];
      }
    }
  }
  elseif ($extension === 'social_media_links') {
    $library = 'fontawesome.component';
    if (isset($libraries[$library]) && ($path = $library_file_finder->find('font-awesome/css/all.min.css'))) {
      $libraries[$library]['css']['component'] = ['/' . $path => ['minified' => TRUE]];
    }
  }
}

/**
 * Implements hook_leaflet_map_view_style_alter().
 */
function openculturas_custom_leaflet_map_view_style_alter(array &$map_settings, LeafletMap $view_style): void {
  $filters = $view_style->displayHandler->getHandlers('filter');

  /** @var \Drupal\geofield\Plugin\views\filter\GeofieldProximityFilter[]|null $proximityFilters */
  $proximityFilters = array_filter($filters, static fn($filter): bool => $filter instanceof GeofieldProximityFilter);
  if (is_countable($proximityFilters) && $proximityFilters !== []) {
    $proximityFilter = reset($proximityFilters);
    try {
      $property = new ReflectionProperty($proximityFilter, 'sourcePlugin');
    }
    catch (\Exception) {
      return;
    }

    $property->setAccessible(TRUE);
    /** @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface $source_plugin */
    $source_plugin = $property->getValue($proximityFilter);
    $value = $proximityFilter->value;
    $origin = $source_plugin->getOrigin();
    if (!empty($origin['lat']) && !empty($origin['lon'])) {
      $origin_marker = $origin;
      $origin_marker['type'] = 'point';
      $origin_marker['label'] = t('Origin');
      $origin_marker['popup'] = ViewsRenderPipelineMarkup::create(t('Origin'));
      $origin_marker['icon'] = [
        'iconType' => 'circle_marker',
        'options' => '{"radius":9,"color":"#fff","fillColor":"#2A93EE","fillOpacity":1,"opacity":1}',
      ];
      $map_settings['features'][] = $origin_marker;
      $map_settings['map']['settings']['center'] = array_merge($map_settings['map']['settings']['center'], $origin);
      $map_settings['map']['settings']['radius'] = $value['value'] ?? NULL;
      $map_settings['map']['settings']['map_position_force'] = TRUE;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function openculturas_custom_flagging_insert(FlaggingInterface $entity): void {
  if ($entity->getFlagId() === 'recommendation_node') {
    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheInvalidator */
    $cacheInvalidator = \Drupal::service('cache_tags.invalidator');
    $flagged_entity = $entity->getFlaggable();
    $cacheInvalidator->invalidateTags($flagged_entity->getCacheTagsToInvalidate());
  }
  elseif (in_array($entity->getFlagId(), ['bookmark_node', 'bookmark_term'], TRUE)) {
    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheInvalidator */
    $cacheInvalidator = \Drupal::service('cache_tags.invalidator');
    $id = \Drupal::currentUser()->id();
    $tags = ['entity_view_user_' . $id . '_full'];
    $cacheInvalidator->invalidateTags($tags);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function openculturas_custom_flagging_update(FlaggingInterface $entity): void {
  if ($entity->getFlagId() === 'recommendation_node') {
    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheInvalidator */
    $cacheInvalidator = \Drupal::service('cache_tags.invalidator');
    $flagged_entity = $entity->getFlaggable();
    $cacheInvalidator->invalidateTags($flagged_entity->getCacheTagsToInvalidate());
  }
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function openculturas_custom_node_prepare_form(NodeInterface $node): void {

  $is_date_entity = $node->bundle() === 'date' && $node->isNew();
  $request = \Drupal::request();
  if ($is_date_entity && $request->query->has('event_id')) {
    $event_id = $request->get('event_id');
    if (empty($event_id)) {
      return;
    }

    $event = Node::load($event_id);
    if (!$event instanceof NodeInterface) {
      return;
    }

    if ($event->bundle() !== 'event') {
      return;
    }

    $node->set('field_event_description', ['target_id' => $event->id()]);
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $source_data */
    $source_data = $event->get('field_people_reference');
    if ($source_data->isEmpty()) {
      return;
    }

    $cloned_paragraphs = [];
    /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
    foreach ($source_data->referencedEntities() as $paragraph) {
      $cloned_paragraphs[] = clone $paragraph;
    }

    $node->set('field_people_reference', $cloned_paragraphs);
  }

  $is_event_entity = $node->bundle() === 'event' && $node->isNew();
  if ($is_event_entity && $request->query->has('member_id')) {
    $member_id = $request->get('member_id');
    if (empty($member_id)) {
      return;
    }

    $profile = Node::load($member_id);
    if (!$profile instanceof NodeInterface) {
      return;
    }

    if ($profile->bundle() !== 'profile') {
      return;
    }

    $paragraph = Paragraph::create(['type' => 'member']);
    $paragraph->set('field_member', ['target_id' => $member_id]);
    $node->set('field_people_reference', [$paragraph]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function openculturas_custom_flagging_prepare_form(FlaggingInterface $entity): void {
  if ($entity->isNew() && $entity->hasField('field_behalf') && $entity->get('field_behalf')->isEmpty()) {
    /** @var \Drupal\user\UserInterface|null $user */
    $user = User::load(\Drupal::currentUser()->id());
    $main_profile_non_empty = $user instanceof UserInterface && $user->hasField('field_main_profile') && !$user->get('field_main_profile')->isEmpty();
    if ($main_profile_non_empty) {
      /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $field */
      $field = $user->get('field_main_profile');
      $main_profile = current($field->referencedEntities());
      if ($main_profile instanceof NodeInterface) {
        $entity->set('field_behalf', ['target_id' => $main_profile->id()]);
      }
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function openculturas_custom_local_tasks_alter(array &$local_tasks): void {
  if (isset($local_tasks['entity.user.canonical'])) {
    $local_tasks['entity.user.canonical']['title'] = t('My content');
    $local_tasks['entity.user.canonical']['weight'] = -3;
  }

  if (isset($local_tasks['entity.user.edit_form'])) {
    $local_tasks['entity.user.edit_form']['title'] = t('Account settings');
    $local_tasks['entity.user.edit_form']['weight'] = -2;
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function openculturas_custom_entity_view_alter(array &$build, EntityInterface $entity): void {
  $isAnonymous = \Drupal::currentUser()->isAnonymous();
  if ($isAnonymous && ($entity->getEntityTypeId() === 'node' || $entity->getEntityTypeId() === 'taxonomy_term')) {
    if (isset($build['flag_bookmark_node'])) {
      $build['flag_bookmark_node'] = [
        '#type' => 'inline_template',
        '#template' => <<<EOF
<div class="flag flag-bookmark-node action-flag"><a class="flag--link disabled" href="{{ path('user.login',{},{'query':{'destination': path('<current>') }}) }}" title="{{ 'Log in to bookmark' | t}}"></a></div>
EOF
        ,
      ];
    }

    if (isset($build['flag_recommendation_node'])) {
      $build['flag_recommendation_node'] = [
        '#type' => 'inline_template',
        '#template' => <<<EOF
<div class="flag flag-recommendation-node action-flag"><a class="flag--link disabled" href="{{ path('user.login',{},{'query':{'destination': path('<current>') }}) }}" title="{{ 'Log in to recommend'| t}}">{{'Recommend'|t}}</a></div>
EOF
        ,
      ];
    }

    assert($entity instanceof NodeInterface || $entity instanceof TermInterface);
    if (isset($build['flag_claim_ownership']) && $entity->hasField('field_allow_claiming') && !$entity->get('field_allow_claiming')
      ->isEmpty()) {
      $allowed = (bool) $entity->get('field_allow_claiming')->value;
      if ($allowed) {
        $build['flag_claim_ownership'] = [
          '#type' => 'inline_template',
          '#template' => <<<EOF
<div class="flag flag-claim-ownership action-flag"><a class="flag--link disabled" href="{{ path('user.login',{},{'query':{'destination': path('<current>') }}) }}" title="{{ 'Log in to claim this' | t}}">{{'Claim ownership'|t}}</a></div>
EOF
          ,
        ];
      }
    }

    if (isset($build['flag_report_abuse'])) {
      $build['flag_report_abuse'] = [
        '#type' => 'inline_template',
        '#template' => <<<EOF
<div class="flag flag-report-abuse action-flag"><a class="flag--link disabled" href="{{ path('user.login',{},{'query':{'destination': path('<current>') }}) }}" title="{{ 'Log in to report abuse' | t}}">{{'Report abuse'|t}}</a></div>
EOF
        ,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function openculturas_custom_node_view_alter(array &$build, NodeInterface $entity): void {
  if ($build['#view_mode'] === 'full' && isset($build['field_forfree'])) {
    // Not for free then there should be a price and hide this field output.
    $build['field_forfree']['#access'] = (bool) $entity->get('field_forfree')->value;
  }

  if ($entity->bundle() === 'date' && $build['#view_mode'] === 'full') {
    $request = \Drupal::request();
    $build['field_location']['#title'] = t("Visit the location's profile");
    $build['field_event_description']['#title'] = t('See all about');
    if ($request->query->has('date_delta') && $entity->hasField('field_date') && ($delta = $request->get('date_delta'))) {
      $cloned_entity = clone $entity;
      /** @var \Drupal\smart_date\Plugin\Field\FieldType\SmartDateFieldItemList $field */
      $field = $cloned_entity->get('field_date');
      /** @var \Drupal\smart_date\Plugin\Field\FieldType\SmartDateItem|null $delta_item */
      $delta_item = $field->get($delta);
      if ($delta_item instanceof SmartDateItem) {
        $field->setValue([$delta_item->getValue()]);

        $display_settings = \Drupal::service('entity_display.repository')->getViewDisplay(
          'node',
          'date',
          'full'
        )->getComponent('field_date');
        if (is_array($display_settings)) {
          if (isset($display_settings['settings']['past_display'])) {
            $display_settings['settings']['past_display'] = 1;
          }

          $build['field_date'] = $field->view($display_settings);
        }
      }
    }
  }

  if ($entity->hasField('field_event_description') && !$entity->get('field_event_description')->isEmpty()) {
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $event_list */
    $event_list = $entity->get('field_event_description');
    $event_item = $event_list->first();
    if (!$event_item instanceof EntityReferenceItem) {
      return;
    }

    $event = $event_item->entity;
    assert($event instanceof NodeInterface);
    $flag_bundles = ['bookmark_node', 'recommendation_node'];
    foreach ($flag_bundles as $flag_bundle) {
      $flag = Flag::load($flag_bundle);
      if ($flag instanceof Flag) {
        $build_key = 'flag_' . $flag->id();
        if (isset($build[$build_key])) {
          $build[$build_key] = array_merge($build[$build_key], [
            '#lazy_builder' => [
              'flag.link_builder:build', [
                $event->getEntityTypeId(),
                $event->id(),
                $flag->id(),
              ],
            ],
          ]);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 *
 * @see openculturas_custom_node_presave()
 * @see openculturas_custom_flagging_insert()
 */
function openculturas_custom_user_view_alter(array &$build, UserInterface $user): void {
  if ($build['#view_mode'] === 'full') {
    // Used to clear cache of user page.
    $build['#cache']['tags'][] = 'entity_view_user_' . $user->id() . '_full';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openculturas_custom_form_node_form_alter(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\node\NodeForm $node_form */
  $node_form = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $node_form->getEntity();
  if ($node->bundle() === 'event') {
    \Drupal::request()->query->remove('destination');
    $form['#submit'][] = 'openculturas_custom_event_submit_handler';
    $form['actions']['openculturas_custom_event_submit'] = $form['actions']['submit'];
    $form['actions']['openculturas_custom_event_submit']['#value'] = t('Save and add date');
    $form['actions']['openculturas_custom_event_submit']['#button_type'] = 'secondary';
    $form['actions']['openculturas_custom_event_submit']['#submit'][] = 'openculturas_custom_event_submit_handler';
  }
}

/**
 * Submit handler for openculturas_custom_form_node_form_alter().
 *
 * Redirects the user to the date add form with the event id as parameter.
 *
 * @see openculturas_custom_form_node_form_alter()
 * @see openculturas_custom_node_prepare_form()
 */
function openculturas_custom_event_submit_handler(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\node\NodeForm $node_form */
  $node_form = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $node_form->getEntity();
  $form_state->setRedirectUrl(Url::fromRoute('node.add', [
    'node_type' => 'date',
  ], [
    'query' => [
      'event_id' => $node->id(),
    ],
  ]));
}

/**
 * Implements hook_views_data_alter().
 */
function openculturas_custom_views_data_alter(array &$data): void {
  $data['views']['non_translatable_nothing'] = [
    'title' => t('Custom text (non translatable)'),
    'help' => t('Provide custom text or link.'),
    'field' => [
      'id' => 'non_translatable_custom',
      'click sortable' => FALSE,
    ],
  ];
}

/**
 * Implements hook_views_pre_render().
 */
function openculturas_custom_views_pre_render(ViewExecutable $view): void {
  // Only doing this for media library widget view until there is
  // a better solution.
  // https://www.drupal.org/project/drupal/issues/3283692#comment-14544647
  if ($view->id() === 'media_library') {
    $current_user = \Drupal::currentUser();
    $result = [];

    // Display only media authored by the current user or can edit.
    foreach ($view->result as $key => $row) {
      /** @var \Drupal\media\MediaInterface $entity */
      $entity = $row->_entity;
      // Do not remove type casting. current user id is a string-int!
      if ((int) $entity->getOwnerId() === $current_user->id() ||
        $entity->access('update') ||
        openculturas_custom_media_is_creative_commons($entity)) {
        $result[$key] = $row;
      }
    }

    $view->result = $result;
  }
}

/**
 * Implements hook_views_post_execute().
 */
function openculturas_custom_views_post_execute(ViewExecutable $view): void {
  if ($view->current_display === 'related_date_alternative' && $view->id() === 'related_date') {
    $routeMatch = \Drupal::routeMatch();
    $displayedNode = $routeMatch->getParameter('node');
    if (!$displayedNode instanceof NodeInterface) {
      return;
    }

    foreach ($view->result as $row) {
      /** @var \Drupal\node\NodeInterface $node */
      $node = $row->_entity;
      if ($node->id() === $displayedNode->id()) {
        $date_delta = $view->getRequest()->get('date_delta');
        if ($date_delta !== NULL && property_exists($row, 'node__field_date_delta') && (int) $row->node__field_date_delta === (int) $date_delta) {
          unset($view->result[$row->index]);
          --$view->total_rows;
          break;
        }

        if ($date_delta === NULL) {
          unset($view->result[$row->index]);
          --$view->total_rows;
          break;
        }
      }
    }
  }
}

/**
 * Helper function to check the licenses for Creative-Commons.
 */
function openculturas_custom_media_is_creative_commons(MediaInterface $media): bool {
  if ($media->hasField('field_licenses') && !$media->get('field_licenses')->isEmpty()) {
    $field = $media->get('field_licenses');
    $field_item = $field->first();
    if (!$field_item instanceof FieldItemInterface) {
      return FALSE;
    }

    $value = $field_item->getValue();
    if (isset($value['license'])) {
      return $value['license'] !== 'all_rights_reserved';
    }
  }

  return FALSE;
}

/**
 * Implements hook_flag_action_access().
 */
function openculturas_custom_flag_action_access(string $action, FlagInterface $flag, AccountInterface $account, ?EntityInterface $flaggable = NULL): AccessResultInterface {
  if ($account->isAnonymous()) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\node\NodeInterface|null $entity */
  $entity = $flaggable;
  if ($entity && $flag->id() === 'claim_ownership' && $entity->hasField('field_allow_claiming') && !$entity->get('field_allow_claiming')->isEmpty()) {
    $allowed = (bool) $entity->get('field_allow_claiming')->value;
    if (!$allowed) {
      return AccessResult::forbidden();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function openculturas_custom_node_presave(NodeInterface $node): void {
  $owner_id = $node->getOwner()->id();
  $tags = ['entity_view_user_' . $owner_id . '_full'];

  if ($node->hasField('field_event_series') && $node->hasField('field_parent_date')) {
    $field = $node->get('field_event_series');
    /** @var \Drupal\Core\Field\FieldItemInterface|null $field_item */
    $field_item = $field->first();
    if ($field->isEmpty() || ($field_item instanceof FieldItemInterface && $field_item->getString() === 'no')) {
      /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $field */
      $field = $node->get('field_parent_date');
      if (!$field->isEmpty()) {
        $field->setValue([]);
      }
    }
  }

  $node_reference_fields = ['field_location', 'field_references'];
  foreach ($node_reference_fields as $field_name) {
    if ($node->hasField($field_name)) {
      $refs = $node->get($field_name)->getValue();
      foreach ($refs as $ref) {
        $tags[] = 'node:' . $ref['target_id'];
      }
    }

    // If the field changes, also invalidate the original value.
    if ($node->original !== NULL && $node->original->hasField($field_name)) {
      $refs = $node->get($field_name)->getValue();
      foreach ($refs as $ref) {
        $tags[] = 'node:' . $ref['target_id'];
      }
    }
  }

  Cache::invalidateTags(array_unique($tags));
}

/**
 * Implements hook_module_implements_alter().
 */
function openculturas_custom_module_implements_alter(array &$implementations, string $hook): void {
  if ($hook === 'views_plugins_filter_alter') {
    $group = $implementations['openculturas_custom'];
    unset($implementations['openculturas_custom']);
    $implementations['openculturas_custom'] = $group;
  }
}

/**
 * Implements hook_views_plugins_filter_alter().
 */
function openculturas_custom_views_plugins_filter_alter(array &$plugins): void {
  $plugins['date']['class'] = Date::class;
  $plugins['date']['provider'] = 'openculturas_custom';
}

/**
 * Implements hook_date_augmenter_plugin_info_alter().
 */
function openculturas_custom_date_augmenter_plugin_info_alter(array &$plugins): void {
  $plugins['addtocal']['class'] = AddToCal::class;
  $plugins['addtocal']['provider'] = 'openculturas_custom';
}

/**
 * Implements hook_checklistapi_checklist_info_alter().
 */
function openculturas_custom_checklistapi_checklist_info_alter(array &$definitions): void {
  if (isset($definitions['update_helper_checklist']['#title'])) {
    $definitions['update_helper_checklist']['#title'] = t('OpenCulturas update instructions');
  }
}

/**
 * Implements hook_form_alter().
 */
function openculturas_custom_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if ($form_id === "checklistapi_checklist_form" && $form['#checklist']->id === 'update_helper_checklist') {
    $checklist = $form['#checklist'];
    $groups = $checklist->items;
    // Prevent the user from Clearing checklist progress.
    $form['actions']['clear']['#access'] = FALSE;
    foreach (Element::children($groups) as $group_key) {
      $group = &$groups[$group_key];

      foreach (Element::children($group) as $item_key) {
        $update_key = str_replace('.', '_', (string) $item_key);
        $entity = Update::load($update_key);

        $entityStatus = $entity && $entity->wasSuccessfulByHook();
        if ($entityStatus) {
          $form[$group_key][$item_key]['#disabled'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function openculturas_custom_eca_delete(): void {
  $entities = \Drupal::entityTypeManager()->getStorage('eca')->loadMultiple();
  if ($entities === []) {
    $storage = \Drupal::entityTypeManager()->getStorage('eca_notification_recipient');
    $entities = $storage->loadMultiple();
    $storage->delete($entities);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function openculturas_custom_preprocess_node(array &$variables): void {
  if (!array_key_exists('#fieldgroups', $variables['elements'])) {
    return;
  }

  if (!is_array($variables['elements']['#fieldgroups'])) {
    return;
  }

  foreach ($variables['elements']['#fieldgroups'] as $field_group) {
    if (!is_object($field_group)) {
      continue;
    }

    if (!property_exists($field_group, 'format_type')) {
      continue;
    }

    if ($field_group->format_type !== 'sub_details') {
      continue;
    }

    $variables['title_attributes']['class'][] = 'visually-hidden';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openculturas_custom_theme_suggestions_details_alter(array &$suggestions, array $variables): void {
  if (array_key_exists('#plugin_id', $variables['element'])) {
    $suggestions[] = 'details__' . $variables['element']['#plugin_id'];
  }
}

/**
 * Implements hook_config_schema_info_alter().
 */
function openculturas_custom_config_schema_info_alter(array &$definitions): void {
  if (isset($definitions['field.field_settings.viewfield']['mapping']['allowed_views'])) {
    $definitions['field.field_settings.viewfield']['mapping']['allowed_views']['orderby'] = 'key';
  }

  if (isset($definitions['field.field_settings.viewfield']['mapping']['allowed_display_types'])) {
    $definitions['field.field_settings.viewfield']['mapping']['allowed_display_types']['orderby'] = 'key';
  }

  if (isset($definitions['block_field_selection.categories']['mapping']['categories'])) {
    $definitions['block_field_selection.categories']['mapping']['categories']['orderby'] = 'key';
  }

  if (isset($definitions['node.type.*'])) {
    $definitions['node.type.*']['mapping']['name']['translation context'] = 'entity_bundle_name';
  }

  if (isset($definitions['core.entity_form_display.*.*.*.third_party.field_group']['sequence'][0]['mapping']['label'])) {
    $definitions['core.entity_form_display.*.*.*.third_party.field_group']['sequence'][0]['mapping']['label']['translation context'] = 'field_group_label';
  }

  if (isset($definitions['core.entity_view_display.*.*.*.third_party.field_group']['sequence'][0]['mapping']['label'])) {
    $definitions['core.entity_view_display.*.*.*.third_party.field_group']['sequence'][0]['mapping']['label']['translation context'] = 'field_group_label';
  }

  if (isset($definitions['paragraphs.paragraphs_type.*']['mapping']['label'])) {
    $definitions['paragraphs.paragraphs_type.*']['mapping']['label']['translation context'] = 'entity_bundle_name';
  }
}

/**
 * Implements hook_locale_translation_projects_alter().
 */
function openculturas_custom_locale_translation_projects_alter(array &$projects): void {
  if (isset($projects['openculturas'])) {
    $projects['openculturas']['info']['name'] = 'OpenCulturas';
    /** @var \Drupal\Core\Extension\ExtensionList $extension_list_module */
    $extension_list_module = \Drupal::service('extension.list.module');
    foreach ($projects['openculturas']['includes'] as $project => $project_name) {
      if ($project === 'openculturas') {
        continue;
      }

      $path = $extension_list_module->getPath($project);
      if (is_dir($path . '/translations') === FALSE) {
        continue;
      }

      $info = $extension_list_module->getExtensionInfo($project);
      $projects[$project] = $projects['openculturas'];
      unset($projects[$project]['includes']);
      $projects[$project]['name'] = $project;
      $projects[$project]['info'] = $info;
      $projects[$project]['info']['interface translation server pattern'] = $path . '/translations/%language.po';
    }
  }
}

/**
 * Set dynamic allowed values for the event_status field. (Entity type node)
 *
 * @see options_allowed_values()
 */
function openculturas_custom_event_status_allowed_values_function(): array {
  return [
    'EventCancelled' => t('Cancelled', [], ['context' => 'event_status']),
    'EventMovedOnline' => t('Moved online', [], ['context' => 'event_status']),
    'EventPostponed' => t('Postponed', [], ['context' => 'event_status']),
    'EventRescheduled' => t('Rescheduled', [], ['context' => 'event_status']),
    'EventScheduled' => t('Scheduled', [], ['context' => 'event_status']),
  ];
}

function openculturas_custom_premiere_allowed_values_function(): array {
  return [
    'premiere' => t('Premiere', [], ['context' => 'premiere']),
    'opening' => t('Opening', [], ['context' => 'premiere']),
    'closing' => t('Closing', [], ['context' => 'premiere']),
    'special' => t('Special', [], ['context' => 'premiere']),
  ];
}

/**
 * Implements hook_mail_alter().
 */
function openculturas_custom_mail_alter(array &$message): void {
  $mail_signature = \Drupal::configFactory()->get('openculturas_custom.settings')->get('mailsignature');
  if (!is_string($mail_signature)) {
    return;
  }

  if ($mail_signature === '') {
    return;
  }

  $message['body'][] = $mail_signature;
}
